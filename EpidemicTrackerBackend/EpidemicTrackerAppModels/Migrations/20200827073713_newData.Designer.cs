// <auto-generated />
using System;
using EpidemicTrackerApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EpidemicTrackerApp.Migrations
{
    [DbContext(typeof(EpidemicTrackerAppDBContext))]
    [Migration("20200827073713_newData")]
    partial class newData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EpidemicTrackerApp.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnName("AddressType")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnName("Area")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("Country")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnName("State")
                        .HasColumnType("varchar")
                        .HasMaxLength(50);

                    b.Property<int>("StreetNo")
                        .HasColumnName("StreetNumber")
                        .HasColumnType("int")
                        .HasMaxLength(15);

                    b.Property<int>("ZipCode")
                        .HasColumnName("Pin Code")
                        .HasColumnType("int")
                        .HasMaxLength(10);

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Disease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnName("Disease Name")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.Property<string>("DiseaseType")
                        .IsRequired()
                        .HasColumnName("DiseaseType")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.HasKey("DiseaseId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Hospital", b =>
                {
                    b.Property<int>("HospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("varchar")
                        .HasMaxLength(15);

                    b.Property<string>("HospitalName")
                        .IsRequired()
                        .HasColumnName("HospitalName")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.HasKey("HospitalId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Hospitals");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasColumnName("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnName("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Login Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("LoginId");

                    b.HasIndex("RoleId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Occupation", b =>
                {
                    b.Property<int>("OccupationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OccupationName")
                        .IsRequired()
                        .HasColumnName("Occupation Name")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.Property<string>("OccupationType")
                        .IsRequired()
                        .HasColumnName("Occupation Type")
                        .HasColumnType("varchar")
                        .HasMaxLength(20);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("OccupationId");

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("Occupations");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Organisation", b =>
                {
                    b.Property<int>("OrganisationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("OrganisationContact")
                        .IsRequired()
                        .HasColumnName("PhoneNumber")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OrganisationName")
                        .IsRequired()
                        .HasColumnName("OrganisationName")
                        .HasColumnType("varchar")
                        .HasMaxLength(25);

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.HasKey("OrganisationId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("PatientID")
                        .IsUnique();

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AadharID")
                        .IsRequired()
                        .HasColumnName("UniquesId")
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("PAge")
                        .HasColumnName("Age")
                        .HasColumnType("int")
                        .HasMaxLength(3);

                    b.Property<long>("PContact")
                        .HasColumnName("Contact")
                        .HasColumnType("bigint")
                        .HasMaxLength(15);

                    b.Property<string>("PEmail")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar")
                        .HasMaxLength(30);

                    b.Property<string>("PGender")
                        .IsRequired()
                        .HasColumnName("Gender")
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasColumnName("PatientName")
                        .HasColumnType("varchar")
                        .HasMaxLength(100);

                    b.HasKey("PatientID");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleName")
                        .HasColumnName("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.TreatmentRecords", b =>
                {
                    b.Property<int>("TreatmentRecordsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdmittedDate")
                        .HasColumnName("Admitted Date")
                        .HasColumnType("date");

                    b.Property<int>("Currentstage")
                        .HasColumnName("Current Stage")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<string>("IsFatal")
                        .IsRequired()
                        .HasColumnName("IsFatal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<string>("Prescription")
                        .IsRequired()
                        .HasColumnName("Prescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RelievingDate")
                        .HasColumnName("Relieving Date")
                        .HasColumnType("date");

                    b.HasKey("TreatmentRecordsId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PatientID");

                    b.ToTable("TreatmentRecords");
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Hospital", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Address", "Address")
                        .WithOne("Hospitals")
                        .HasForeignKey("EpidemicTrackerApp.Models.Hospital", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Login", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Role", "Role")
                        .WithMany("Logins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Occupation", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Patient", "Patient")
                        .WithOne("Occupation")
                        .HasForeignKey("EpidemicTrackerApp.Models.Occupation", "PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Organisation", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Address", "Address")
                        .WithOne("Organisations")
                        .HasForeignKey("EpidemicTrackerApp.Models.Organisation", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EpidemicTrackerApp.Models.Patient", "Patient")
                        .WithOne("Organisation")
                        .HasForeignKey("EpidemicTrackerApp.Models.Organisation", "PatientID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.Patient", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Address", "Address")
                        .WithOne("Patient")
                        .HasForeignKey("EpidemicTrackerApp.Models.Patient", "AddressId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("EpidemicTrackerApp.Models.TreatmentRecords", b =>
                {
                    b.HasOne("EpidemicTrackerApp.Models.Disease", "Disease")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpidemicTrackerApp.Models.Hospital", "Hospital")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EpidemicTrackerApp.Models.Patient", "Patient")
                        .WithMany("TreatmentRecords")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
